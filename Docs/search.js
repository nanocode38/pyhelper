window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyhelper.gamehelpers.pghelper.widgets", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "kind": "module", "doc": "<p>Widgets\n<s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s>\nThis module provides a number of efficient Pygame GUI components that help you develop Pygame games.\nThis module has the following classes:\nAnimate: An animation class based on a series of loaded images\nTextButton: a _button created from text; no image can be specified\nCustomButton: A _button created from an image\nCheckBox: A checkbox created from an image\nDragger: An image that you can drag around\nImage: An image that can be modified\nInputText: An input field for the user to enter\nRadioButtons: A set of radio boxes based on checkboxes\nAll classes ending in Config are configuration classes, which correspond to the first argument of each component class.\nAll Config classes take screen as their first parameter and also have a property called screen, which is the Surface\nof the scene to be drawn\nAll Config classes have a set_config method that allows you to set a property using the format 'instance.set_config (\nproperty name as a string, value to set)', which will raise a ValueError if it doesn't exist\nAll components should be created and called in the standard Pygame manner.The basic usage is as follows:\nIt is first created after setting up all components before the main loop starts\nThe main loop then starts\nDraws the lowest level background image or background color\nStart checking for all events.If the component's update method requires an event parameter, it needs to be called\nwhen checking for events.\nAfter checking the event, intervene and execute for the state of all components and be prepared\nThen, the update() method is called for the other components to update the screen\nNext, the component is drawn by calling the draw() method\nFinally, we refresh the screen using pghelper.display.update().\nSee the Pyhelper documentation for detailed usage of all components:\nOr a docstring for the corresponding component class</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate", "kind": "class", "doc": "<p>An animation class based on a series of loaded images</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ac</span><span class=\"p\">:</span> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">AnimateConfig</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.images", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.images", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.duration", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.nimage", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.nimage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.xloop", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.xloop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.elapsed", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.elapsed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.loop", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.loop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.nloop", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.nloop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.start_time", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.show_first_image_at_end", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.show_first_image_at_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.playing", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.playing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.index", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.play", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.play", "kind": "function", "doc": "<p>Playing the animate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.pause", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.pause", "kind": "function", "doc": "<p>Pause the animate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.update", "kind": "function", "doc": "<p>Update the animate, Should be called from the main game loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Animate.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Animate.draw", "kind": "function", "doc": "<p>Draw the animate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig", "kind": "class", "doc": "<p>This is the configuration class for the Animate class.\nThis class requires a set of images in addition to the basic screen parameter, as described in the images property\nIt includes the following configuration options</p>\n\n<p>Attributes:\n    - images (tuple): This property can be a set of image paths to animate or a set of loaded image objects. If you\n     need to animate as a Sprite, use the pghelper.disassemble_sprite_sheet() function\n    - autostart (bool): This property indicates if the animation will start automatically and defaults to False\n    - show_first_image_at_end(bool): This property is a Boolean indicating whether to show the first image after the\n     animation is playing.It defaults to True\n    - loop (bool): This property is a Boolean indicating whether the animation should loop indefinitely and defaults to\n     False\n    - nloop (int): This property specifies how many times the animation should loop and defaults to 1\n    - duration(int): This property specifies that the image is switched every few Seconds</p>\n", "bases": "BaseConfig"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span>, </span><span class=\"param\"><span class=\"n\">images</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig.autostart", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig.autostart", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig.show_first_image_at_end", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig.show_first_image_at_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig.loop", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig.loop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig.nloop", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig.nloop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.AnimateConfig.duration", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "AnimateConfig.duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton", "kind": "class", "doc": "<p>An image-based custom _button class</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bc</span><span class=\"p\">:</span> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">CustomButtonConfig</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.screen_rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.screen_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.command", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.args", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.text_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.text_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.sounds_on_chick", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.sounds_on_chick", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.up_image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.up_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.hidden", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.hidden", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.lock", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.is_chick", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.is_chick", "kind": "function", "doc": "<p>Return Whether to click</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.is_hover", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.is_hover", "kind": "function", "doc": "<p>Return Whether to hover</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.update", "kind": "function", "doc": "<p>Update the Button</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButton.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButton.draw", "kind": "function", "doc": "<p>Draw the Button</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig", "kind": "class", "doc": "<p>This is the configuration class for the CustomButton class. It includes the following configuration options\nIn addition to the basic screen parameter, this class also requires the image_paths parameter, as described in\nthe description of the image_paths property\nAttributes:\n    - image_paths: This is a tuple of paths for all images, which should be passed in \"release state, hold state, hover\n     state, lock state\". If any of the last three are specified, it is automatically set to the first\n    - sounds_on_chick: This is the sound effect that was played when the _button was clicked and is a string pointing to\n     the sound effect location. The default is None, which means no sound effect will be played.\n    - command: is what needs to be done when the _button is pressed, is of type Function, defaults to None, i.e.,\n     does nothing.\n    - args: This is a tuple containing all the arguments of the command function</p>\n", "bases": "BaseConfig"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>, </span><span class=\"param\"><span class=\"n\">images</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.text_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.text_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[list, tuple]"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.font", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pygame.font.Font]"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.font_size", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.font_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.images", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.images", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.sounds_on_chick", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.sounds_on_chick", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pygame.mixer.Sound]"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.command", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.command", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable]"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CustomButtonConfig.args", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CustomButtonConfig.args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig", "kind": "class", "doc": "<p>This is the configuration class for the TextButton class. It includes the following configuration options\nAttributes:\n    - width (int): The length of the _button\n    - height (int): The height of the _button\n    - text (str): The text on the _button\n    - button_color (list): A list of _button colors whose four elements represent the colors of the following states:\n     normal, pressed, suspended, and locked\n    - text_color (list): This is a list of _button text colors, with four elements representing the colors of the\n    following states: normal, pressed, suspended, locked\n    - font (str): str representation of the text font\n    - text_size (int): The size of the text\n    - sounds_on_chick(str): This is the sound effect that was played when the _button was clicked and is a string\n    pointing to the sound effect location. The default is None, which means no sound effect will be played.\n    the center of the screen.\n    - command(Callable): is what needs to be done when the _button is pressed, is of type Function, defaults to None,\n    i.e., does nothing.\n    - args(tuple): This is a tuple containing all the arguments of the command function.</p>\n", "bases": "BaseConfig"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.width", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.height", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.text_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.text_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.text_size", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.text_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.sounds_on_chick", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.sounds_on_chick", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.button_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.button_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.command", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButtonConfig.args", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButtonConfig.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton", "kind": "class", "doc": "<p>A text button created from text</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tbc</span><span class=\"p\">:</span> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">TextButtonConfig</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.BUTTON_UP", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.BUTTON_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.BUTTON_DOWN", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.BUTTON_DOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.BUTTON_OVER", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.BUTTON_OVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.BUTTON_LOCK", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.BUTTON_LOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.sounds_on_chick", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.sounds_on_chick", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.command", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.args", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.hidden", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.hidden", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.text_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.text_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.mode", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.lock", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.is_chick_down", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.is_chick_down", "kind": "function", "doc": "<p>Check if the mouse is pressed within the text button</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: whether it was clicked</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.update", "kind": "function", "doc": "<p>Update the Button</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether to click the button</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.button_is_chick", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.button_is_chick", "kind": "function", "doc": "<p>Return Whether to chick</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether to click</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.button_is_hover", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.button_is_hover", "kind": "function", "doc": "<p>Return Whether to hover</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether to hover</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.TextButton.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "TextButton.draw", "kind": "function", "doc": "<p>Draw Button</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox", "kind": "class", "doc": "<p>A checkbox created based on an image</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cc</span><span class=\"p\">:</span> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">CheckBoxConfig</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.lock", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.is_check", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.is_check", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.image_rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.image_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.msg_image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.msg_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.msg_rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.msg_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.update", "kind": "function", "doc": "<p>Update the CheckBox</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether it is in a click status</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBox.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBox.draw", "kind": "function", "doc": "<p>Draw the CheckBox</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBoxConfig", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBoxConfig", "kind": "class", "doc": "<p>This is the configuration class for the CheckBox class. It includes the following configuration options\nAttributes:\n    - text (str): This is the text to display in the CheeckBox Default is 'CheckBox'.\n    - font (str): This is the font name for the text property; the default font is used by default\n    - image_path (str): This attribute is a tuple whose elements are unchecked, checked, locked to checked,\n    and locked to the image in the checked state\n    - text_color (tuple): This refers to the text new_color</p>\n", "bases": "BaseConfig"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBoxConfig.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBoxConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBoxConfig.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBoxConfig.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBoxConfig.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBoxConfig.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBoxConfig.image_paths", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBoxConfig.image_paths", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.CheckBoxConfig.text_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "CheckBoxConfig.text_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger", "kind": "class", "doc": "<p>A draggable image component</p>\n\n<p>Args:\n    screen (Screen): The surface of the scene to be drawn\n    images (tuple): A set of image paths or Surface objects representing the states of the component,\n    where the element images are in order: normal state, pressed state, suspended state, locked state</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">images</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.up_image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.up_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.hidden", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.hidden", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.lock", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.is_drag", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.is_drag", "kind": "function", "doc": "<p>Return Whether to drag</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether to drag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.is_hover", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.is_hover", "kind": "function", "doc": "<p>Return Whether to hover</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether to hover</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.update", "kind": "function", "doc": "<p>Update Component</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Dragger.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Dragger.draw", "kind": "function", "doc": "<p>Draw Component</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText", "kind": "class", "doc": "<p>Display Text on the scene</p>\n\n<p>Args:\n    screen(Screen): The surface of the scene to be drawn\n    font(str): Draws a string representation of the font default: None\n    size(int): The font size\n    text(str): The text\n    new_color(tuple): The text new_color</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.font", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pygame.font.Font"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.text", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.set_value", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.set_value", "kind": "function", "doc": "<p>Reset the text content and color</p>\n\n<p>Args:\n    new_text: new text, default: The original text\n    new_color: new Color, default: The original color</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">new_color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.DisplayText.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "DisplayText.draw", "kind": "function", "doc": "<p>Draw the Text</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image", "kind": "class", "doc": "<p>An image that can be modified</p>\n\n<p>Args:\n    screen: pygame.Surface object for home screen\n    loc: Screen coordinates for image placement\n    image_path: The Path of image\n    rect: The rect of image</p>\n\n<p>Raises:\n    ValueError: If neither loc nor rect is passed in</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">Rect</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.image", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.hidden", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.hidden", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.flip", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.flip", "kind": "function", "doc": "<p>Flipping images</p>\n\n<p>Args:\n    flip_horizontal: Whether to flip horizontally, Default False\n    flip_vertical: Whether to flip vertical, Default False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flip_horizontal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">flip_vertical</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.set_move", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.set_move", "kind": "function", "doc": "<p>Overlay position</p>\n\n<p>Args:\n    x: The width-coordinate you want to add, Default 0\n    y: The height-coordinate you want to add, Default 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.rot_center", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.rot_center", "kind": "function", "doc": "<p>rotate an image while keeping its center and size</p>\n\n<p>Args:\n    angle: The angle you want to rotate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.set_position", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.set_position", "kind": "function", "doc": "<p>move in position</p>\n\n<p>Args:\n    x: width-coordinate\n    y: height-coordinate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.scale", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.scale", "kind": "function", "doc": "<p>Resizing images\nArgs:\n    width: Width after scaling is completed\n    height: Height after scaling is completed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.get_rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.get_rect", "kind": "function", "doc": "<p>Get the rectangle of the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">Rect</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.Image.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "Image.draw", "kind": "function", "doc": "<p>Draw the image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText", "kind": "class", "doc": "<p>An input box for the user to enter</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">itc</span><span class=\"p\">:</span> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">InputTextConfig</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.CANCELLED_TAB", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.CANCELLED_TAB", "kind": "variable", "doc": "<p></p>\n", "default_value": "-1"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.KEY_REPEAT_DELAY", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.KEY_REPEAT_DELAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "500"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.KEY_REPEAT_RATE", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.KEY_REPEAT_RATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "50"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.image_rect", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.image_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.loc", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.loc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.cursor_position", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.cursor_position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.update", "kind": "function", "doc": "<p>Update the InputBox</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n\n<p>Returns:\n    bool: Whether it is in a click status</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.draw", "kind": "function", "doc": "<p>Draws the Text in the screen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.get_value", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.get_value", "kind": "function", "doc": "<p>Returns the text entered by the user</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.set_value", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.set_value", "kind": "function", "doc": "<p>Sets new text into the field</p>\n\n<p>Args:\n    new_text: The text you want to use</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.is_focus", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.is_focus", "kind": "function", "doc": "<p>Returns:\n    bool: Does InputText have a focus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.clear", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.clear", "kind": "function", "doc": "<p>Clear the text in the field</p>\n\n<p>Args:\n    keep_focus: Do you want to keep the focus</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keep_focus</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.remove_focus", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.remove_focus", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.give_focus", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.give_focus", "kind": "function", "doc": "<p>Give focus to this field\nMake sure focus is removed from any previous field before calling this</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.set_next_field_on_tab", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.set_next_field_on_tab", "kind": "function", "doc": "<p>Args:\n    next_field_on_tab: The next field you want to set</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">next_field_on_tab</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputText.set_loc", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputText.set_loc", "kind": "function", "doc": "<p>set position</p>\n\n<p>Args\n    loc: Coordinates on the screen coordinate system</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig", "kind": "class", "doc": "<p>This is the configuration class for the CheckBox class. It includes the following configuration options</p>\n\n<p>Attributes:\n    -loc (tuple): This property indicates the initial top-left position of the text box component.It is represented by\n     a tuple and defaults to (0, 0).\n    -new_color (tuple): This property represents the background new_color of the text box.It is represented as an RGB\n     tuple and defaults to (0, 0, 0).\n    -text_color (tuple): This property is the new_color of the text in the text box.It is represented as an RGB tuple\n     and defaults to (2255, 255, 255).\n    -font (str): This property represents the name of the text font in string format and defaults to None, which is the\n     system default font\n    -value (str): This property represents the text in the initial state and defaults to.\n    -width (int): This property is the length of the text box in pixels.It defaults to 250\n    -font_size (int): This property represents the font size and also determines the height of the text box.It defaults\n     to 30\n    - focus_color(tuple): This property refers to the new_color of the outer border of the text box while it is\n     selected, defaults to (0, 0, 0).\n    -init_focus (bool): This property indicates whether the text box gets focus directly when initialized and defaults\n     to False\n    -mask (str): This property indicates the character in which the input should be rendered in the text field\n     (* if it's a password field).It defaults to None, which means no mask is used\n    - keep_focus_on_submit(bool): This property indicates whether to keep focus when the Enter or Return key is pressed\n     in a text box. It defaults to False\n    -command (function): This is the function you want to call when the Enter or Return key is pressed in the text box.\n     It defaults to None, indicating that no function was called\n    -args (tuple): This is a tuple representing the arguments of the command</p>\n", "bases": "BaseConfig"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screen</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.loc", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.loc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.text_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.text_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.font", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.value", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.width", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.font_size", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.command", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.args", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.focus_color", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.focus_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.init_focus", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.init_focus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.mask", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.mask", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.InputTextConfig.keep_focus_on_submit", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "InputTextConfig.keep_focus_on_submit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons", "kind": "class", "doc": "<p>Set of radio boxes based on checkboxes\nArgs:\n    screen (pghelper.Surface): The surface of the scene to be drawn\n    buttons (list[CheckBox]): A list of CheckBox instances</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons.__init__", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">surface</span><span class=\"o\">.</span><span class=\"n\">Surface</span>,</span><span class=\"param\">\t<span class=\"n\">buttons</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">CheckBox</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons.screen", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons.buttons", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons.buttons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons.update", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons.update", "kind": "function", "doc": "<p>Update Radio boxes</p>\n\n<p>Args:\n    event: Events passed in the event loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons.get_focus", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons.get_focus", "kind": "function", "doc": "<p>Returns which radio box is selected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.widgets.RadioButtons.draw", "modulename": "pyhelper.gamehelpers.pghelper.widgets", "qualname": "RadioButtons.draw", "kind": "function", "doc": "<p>Draw Radio boxes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper", "modulename": "pyhelper.gamehelpers.pghelper", "kind": "module", "doc": "<p>This is a collection of Pygame-based game development tool functions that rely on Python Pygame third-party libraries\nCopyright (C)</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.disassemble_sprite_sheet", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "disassemble_sprite_sheet", "kind": "function", "doc": "<p>This function processes a Sprite image into a set of loaded Surface objects</p>\n\n<p>Args:\n    image_path: the path to the total Sprite graph\n    width: The length of an image\n    height: The height of an image\n    num_of_image: The total number of photos</p>\n\n<p>Returns:\n    list: Surface objects for all images</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">num_of_image</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.draw_background", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "draw_background", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyhelper.gamehelpers.pghelper.Background object&gt;"}, {"fullname": "pyhelper.gamehelpers.pghelper.load_images", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "load_images", "kind": "function", "doc": "<p>Loading a series of images</p>\n\n<p>Args:\n    image_paths: A list of paths for a series of images</p>\n\n<p>Returns:\n    Iterator[pygame.Surface]: A list of loaded Surface objects</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_paths</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene", "kind": "class", "doc": "<p>The Scene class is an abstract class to be used as a base class for any scenes that you want to create.</p>\n\n<p>In the startup code for your  application, you create an instance of each of the\nscenes that you want to be available.  Then you build a dictionary like this</p>\n\n<pre><code>|    {&lt;sceneKey1&gt;:&lt;sceneObject1&gt;, &lt;sceneKey2&gt;:&lt;sceneObject2&gt;, ...}\n</code></pre>\n\n<p>Then you pass this dictionary when you instantiate the Scene Manager.\nSee the SceneMgr documentation for details.</p>\n\n<p>To create a scene, you must write a subclass that inherits from this class.\nYour class must implement these methods</p>\n\n<pre><code>|   __init__(), update(), draw(), get_scene_key()\n</code></pre>\n\n<p>Other methods can be overridden if you wish:</p>\n\n<pre><code>| enter(), leave()\n</code></pre>\n\n<p>You can add any additional methods that your class requires.\nAdditionally, there are other methods to allow you to get or set info, or navigate to other scenes:</p>\n\n<pre><code>| go_to_scene(), quit(), request(), respond() and more.\n</code></pre>\n\n<p>In the __init__() method of your scene subclass, you will receive a window reference.\nYou should copy this into an instance variable like this, and use it when drawing:</p>\n\n<pre><code>|    def __init__(self, screen):\n|        self.screen = screen\n|        self.screen_rect = screen.get_rect()\n|        # Add any initialization you want to do here.\n\n\nYou also need to write a get_scene_key() method that returns a string\nor constant that uniquely identifies the scene.  It is recommended that you\nbuild and import a Constants.py file that contains constants for each scene,\nand use the key associated with the current scene here.\n|    def get_scene_key(self):\n|        return &lt;string or CONSTANT that identifies this scene&gt;\n</code></pre>\n\n<p>When your scene is active, the SceneManager calls a standard set of methods in the current scene.\nTherefore, all scenes must implement these methods (polymorphism):</p>\n\n<pre><code>|    update()        # called in every frame\n|    draw()          # called in every frame\n</code></pre>\n\n<p>The following methods can optionally be implemented in a scene.  If they are not\nimplemented, then the null version in the Scene subclass will be used.\n(The Scene class' default versions only execute a pass statement):</p>\n\n<pre><code>|    enter()          # called once whenever the scene is entered\n|    update()         # called in every frame\n|    leave()          # called once whenever the scene is left\n</code></pre>\n\n<p>When you want to go to a new scene, call:</p>\n\n<pre><code>|    self.go_to_scene() and pass in the sceneKey of the scene you want to go to,\n|    and optionally, pass any data you want the next scene to receive in its enter() method.\n</code></pre>\n\n<p>If you want to quit the program from your scene, call:\n    |    self.quit()</p>\n", "bases": "abc.ABC"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.screen", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.screen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.screen_rect", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.screen_rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.get_scene_key", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.get_scene_key", "kind": "function", "doc": "<p>This returns a unique identity string that represents the internal representation of the scene</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.update", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.update", "kind": "function", "doc": "<p>This method is called in every frame of the scene to handle events and key presses</p>\n\n<p>Args:\n    events: a list of events your method should handle.\n    key_pressed_list: a list of keys that are pressed (a Boolean for each key).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pygame</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">key_pressed_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.enter", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.enter", "kind": "function", "doc": "<p>This method is called whenever the user enters a scene.\nShould be overridden if you expect data when your scene is entered.\nAdd any code you need to start or re-start the scene</p>\n\n<p>Args:\n    data: can be of any type agreed to by the old and new scenes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.draw", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.draw", "kind": "function", "doc": "<p>This method is called in every frame of the scene to draw anything that needs to be drawn\nYour code MUST override this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.leave", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.leave", "kind": "function", "doc": "<p>This method is called whenever the user leaves a scene\nOverride this method, and add any code you need to clean up the scene before leaving</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.quit", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.quit", "kind": "function", "doc": "<p>Call this method if you want to quit, from inside a scene</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.go_to_scene", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.go_to_scene", "kind": "function", "doc": "<p>Call this method whenever you want to go to a new scene</p>\n\n<p>Args:\n    next_scene_key: the scene key (string) of the scene to go to\n    data: any data you want sent to the next scene (defaults: None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">next_scene_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.request", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.request", "kind": "function", "doc": "<p>Call this method to get information from another scene</p>\n\n<p>The target scene must implement a method named: respond,\nit can return any info in any way the two scenes agree upon</p>\n\n<p>Args:\n    target_scene_key: the scene key (string) of the scene to ask for data\n    request_id: the data you want from the target scene</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_scene_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.send", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.send", "kind": "function", "doc": "<p>Call this method to send information to  another scene</p>\n\n<p>The other scene must implement a method named:  receive().\nYou can pass any info the two scenes agree upon</p>\n\n<p>Args:\n    target_scene_key: the scene key (string) of the scene to ask for data\n    send_id: the type of data you are sending the target scene\n    info: the actual data to send (can be any type)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_scene_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">send_id</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.send_all", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.send_all", "kind": "function", "doc": "<p>Call this method to send information to all other scenes</p>\n\n<p>The other scenes must implement a method named:  receive().\nYou can pass any info that the sender and all other scenes agree upon</p>\n\n<p>Args:\n    send_id: the type of data you are sending the target scene\n    info: the actual data to send</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">send_id</span>, </span><span class=\"param\"><span class=\"n\">info</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.respond", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.respond", "kind": "function", "doc": "<p>Respond to a request for information from some other scene</p>\n\n<p>You must override this method if your scene expects to handle\nrequests for information from other scenes via calls to:  request()\nArgs:\n    request_id: identifier of what data to be sent back to the caller</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request_id</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.receive", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.receive", "kind": "function", "doc": "<p>Receives information from another scene.</p>\n\n<p>You must override this method if your scene expects to receive information from\nother scenes sending information via calls to:  send()</p>\n\n<p>Args:\n    receive_id - an identifier for what type of information is being received\n    info - the information sent from another scene</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">receive_id</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.add_scene", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.add_scene", "kind": "function", "doc": "<p>Call this method whenever you want to add a new scene dynamically.\nFor example, you could have a game with many levels (each implemented as a scene),\nbut only have the current level loaded.  As the player completes a level, you\ncould do a remove_scene on the current level and do an add_scene on the\nnext level, then do a goToScene on the new level.</p>\n\n<p>Args:\n    scene_key: a key to uniquely identify this scene\n    scene: an instance of the new scene to be added\n    (typically, you would instantiate the new scene, and pass in that reference to this call)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scene_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">scene</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.Scene.remove_scene", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "Scene.remove_scene", "kind": "function", "doc": "<p>Call this method whenever you want to remove an existing scene\nYou can remove a scene to save memory - the scene object will be deleted.\nThe SceneMgr delays removing the scene until the next time through the main loop.\nTherefore, it is safe to call to remove_scene from its own scene, if you immediately\ngo to another scene.</p>\n\n<p>Args:\n    scene_key: the scene key (string) of the scene to remove</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scene_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr", "kind": "class", "doc": "<p>SceneMgr (Scene Manager)  allows you to build a program with multiple scenes.</p>\n\n<p>The SceneMgr manages any number of scenes built as subclasses of the \"Scene\" class.\nFor more details, see the \"Scene\" class.</p>\n\n<p>Args:\n    scenes: is a dictionary or list that consists of:\n        {<sceneKey>: <sceneObject>, <sceneKey>: <sceneObject>, ...} or [<sceneObject>, <sceneObject>, ...]\n          where each sceneObject is an object instantiated from a scene class\n          (For details on Scenes, see the Scene class)\n    fps - is the frames per second at which the program should run</p>\n\n<p>Based on the concept of a \"Scene Manager\" by Blake O'Hare of Nerd Paradise</p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr.__init__", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scenes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fps</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">frame_rate_display</span><span class=\"p\">:</span> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">gamehelpers</span><span class=\"o\">.</span><span class=\"n\">pghelper</span><span class=\"o\">.</span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">DisplayText</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr.fps", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr.fps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr.frame_rate_display", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr.frame_rate_display", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr.show_frame_rate", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr.show_frame_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr.scenes_to_remove_list", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr.scenes_to_remove_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.pghelper.SceneMgr.run", "modulename": "pyhelper.gamehelpers.pghelper", "qualname": "SceneMgr.run", "kind": "function", "doc": "<p>This method implements the main pygame loop.\nIt should typically be called as the last line of your main program.\nIt is designed to call a standardized set of methods in the current scene.\nAll scenes must implement the following methods (polymorphism):\n|   update()  # called in every frame\n|   draw()          # called in every frame</p>\n\n<p>The following methods can be implemented in a scene:\n    |   enter()  # called once whenever the scene is entered\n    |   leave()  # called once whenever the scene is left</p>\n\n<p>If any is not implemented, then the version in the Scene base class,\nwhich only performs a pass statement, will be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers", "modulename": "pyhelper.gamehelpers", "kind": "module", "doc": "<p>A library that provides game help without dependencies\nCopyright (C)</p>\n"}, {"fullname": "pyhelper.gamehelpers.Timer", "modulename": "pyhelper.gamehelpers", "qualname": "Timer", "kind": "class", "doc": "<p>A class to manage a timer with the option to execute a command after the timer finishes.</p>\n\n<p>Args:\n    time_in_seconds: The time in Seconds the timer should run for. default: -1, It's infinite\n    command: The command to execute after the timer finishes. default: None</p>\n\n<p>Attributes:\n    time_in_seconds (float): The time in Seconds the timer should run for.</p>\n"}, {"fullname": "pyhelper.gamehelpers.Timer.__init__", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time_in_seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.Timer.time_in_seconds", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.time_in_seconds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.Timer.start_time", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.start_time", "kind": "variable", "doc": "<p>start_time (float)(read only): The time in Seconds the timer started.</p>\n"}, {"fullname": "pyhelper.gamehelpers.Timer.is_running", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.is_running", "kind": "variable", "doc": "<p>is_running (bool)(read only): Whether the timer is running or not.</p>\n"}, {"fullname": "pyhelper.gamehelpers.Timer.start", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.start", "kind": "function", "doc": "<p>Start the timer with the option to change the time in Seconds.</p>\n\n<p>Attributes:\n    new_time_in_seconds: The start time of the timer, defaults to the value of time.time()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_time_in_seconds</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.Timer.update", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.update", "kind": "function", "doc": "<p>Update the timer's saved time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.Timer.pause", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.pause", "kind": "function", "doc": "<p>Pause the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.Timer.go_on", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.go_on", "kind": "function", "doc": "<p>Resume the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.Timer.get_time", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.get_time", "kind": "function", "doc": "<p>Get the timer's saved time, updating it if the timer is running.</p>\n\n<p>Attributes:\n    number_of_reserved_bits: Returns the number of digits retained in the value</p>\n\n<p>Returns:\n    Timer's saved time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number_of_reserved_bits</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.Timer.stop", "modulename": "pyhelper.gamehelpers", "qualname": "Timer.stop", "kind": "function", "doc": "<p>Stop the timer and execute the command if provided.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer", "kind": "class", "doc": "<p>A class to create a count-up timer that can be paused and resumed.\nThis class is a subclass of the Timer class.</p>\n\n<p>Args:\n    start_time: The start time of the timer, in Seconds, Default 0.0</p>\n\n<p>Attributes:\n    is_pause: A boolean indicating whether the timer is paused.</p>\n"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.__init__", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.is_pause", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.is_pause", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.is_running", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.is_running", "kind": "variable", "doc": "<p>is_running (read only): A boolean indicating whether the timer is running.</p>\n"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.start_time", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.start_time", "kind": "variable", "doc": "<p>start_time (read only): The start time of the timer.</p>\n"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.start", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.start", "kind": "function", "doc": "<p>Start the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.get_time", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.get_time", "kind": "function", "doc": "<p>Return the current time of the timer in the specified format.</p>\n\n<p>Args:\n    mode: The format of the time to be returned. If 'Seconds', return the time in Seconds. If 'HHMMSS',\n        return the time as HH:MM:SS.</p>\n\n<p>Returns:\n    If the mode is 'HHMMSS': str: The current time of the timer in the specified format.\n    Else: The current time of the timer in Seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;Seconds&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountUpTimer.stop", "modulename": "pyhelper.gamehelpers", "qualname": "CountUpTimer.stop", "kind": "function", "doc": "<p>Stop the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer", "kind": "class", "doc": "<p>A class to create a count-up timer that can be paused and resumed.\nThis class is a subclass of the Timer class.</p>\n\n<p>Args:\n    str_start_time: String in format HHMMSS, countdown time</p>\n"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.__init__", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">str_start_time</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.seconds", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.seconds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.start", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.start", "kind": "function", "doc": "<p>Start the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.update", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.update", "kind": "function", "doc": "<p>Update the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.pause", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.pause", "kind": "function", "doc": "<p>Pause the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.go_on", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.go_on", "kind": "function", "doc": "<p>Resume the timer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.get_time", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.get_time", "kind": "function", "doc": "<p>Return the current time of the timer in the specified format.</p>\n\n<p>Args:\n    mode: The format of the time to be returned. If 'Seconds', return the time in Seconds. If 'HHMMSS',\n    return the time as HH:MM:SS.</p>\n\n<p>Returns:\n    If the mode is 'HHMMSS': str: The current time of the timer in the specified format.\n    Else: The current time of the timer in Seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;Seconds&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.CountDownTimer.stop", "modulename": "pyhelper.gamehelpers", "qualname": "CountDownTimer.stop", "kind": "function", "doc": "<p>Stop the Timer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.gamehelpers.game_help_window", "modulename": "pyhelper.gamehelpers", "qualname": "game_help_window", "kind": "function", "doc": "<p>The function used to display help text for the game</p>\n\n<p>Args:\n    help_text: Help text to display\n    title: popup title, Default: 'Game Help'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">help_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Game Help&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.random", "modulename": "pyhelper.random", "kind": "module", "doc": "<p>A random function library for generating truly random numbers\nCopyright (C)</p>\n"}, {"fullname": "pyhelper.random.randint", "modulename": "pyhelper.random", "qualname": "randint", "kind": "function", "doc": "<p>Generates a random integer within the inclusive range [min, max].</p>\n\n<p>This function generates a random integer in the range [min, max] using a\nmore secure randomization method based on os.urandom for generating the\nbase random seed. It ensures that the generated number is uniformly\ndistributed across the specified range.</p>\n\n<p>Args:\n    min_: The lower limit of the range (inclusive).\n    max_: The upper limit of the range (inclusive). Must be greater than or equal to min.\n    random: Optional parameters for generating random dependency functions, default to random() functions generated using os.urandom()</p>\n\n<p>Returns:\n    int: A random integer within the inclusive range [min, max].</p>\n\n<p>Raises:\n    ValueError: If the min parameter is greater than the max parameter.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">min_</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">random</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.random.choice", "modulename": "pyhelper.random", "qualname": "choice", "kind": "function", "doc": "<p>Select a random element from a non-empty sequence.</p>\n\n<p>This function selects a random element from the given non-empty sequence.\nIt uses the randint function to generate a random index within the range\nof the sequence length.</p>\n\n<p>Args:\n    seq: The non-empty sequence from which to select a random element.\n    random: Optional parameters for generating random dependency functions, default to random() functions generated using os.urandom()</p>\n\n<p>Returns:\n    Sized: The randomly selected element from the sequence.</p>\n\n<p>Raises:\n    IndexError: When the sequence provided is empty</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span>, </span><span class=\"param\"><span class=\"n\">random</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">random</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.random.randrange", "modulename": "pyhelper.random", "qualname": "randrange", "kind": "function", "doc": "<p>Return a randomly selected element from the range(start, stop, step).</p>\n\n<p>This function returns a randomly selected element from the range specified by\nthe start, stop, and step parameters. If only one argument is provided, it\ntreats it as the stop value and starts from 1 with a step of 1. If no arguments\nare provided, it returns a random integer from the range 0-9.</p>\n\n<p>Args:\n    start: The start of the range. Default is 1.\n    stop: The end of the range. Default is the start value.\n    step: The step value for the range. Default is 1.\n    random: Optional parameters for generating random dependency functions, default to random() functions generated using os.urandom()</p>\n\n<p>Returns:\n    int: A randomly selected element from the specified range.</p>\n\n<p>Raises:\n    ValueError: If the range is empty or step is zero\n    ValueError: If the stop value is less than the start value</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">random</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">random</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.random.shuffle", "modulename": "pyhelper.random", "qualname": "shuffle", "kind": "function", "doc": "<p>Shuffles the elements of a sequence in-place.</p>\n\n<p>This function takes a sequence (such as a list or tuple) as input and\nshuffles its elements in-place using the Fisher-Yates algorithm. The original\nsequence is modified, and no new sequence is created.</p>\n\n<p>Args:\n    seq: The sequence to be shuffled.\n    random: Optional parameters for generating random dependency functions, default to random() functions generated using os.urandom()</p>\n\n<p>Returns:\n    None: The original sequence is modified in-place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span>, </span><span class=\"param\"><span class=\"n\">random</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">random</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.random.sample", "modulename": "pyhelper.random", "qualname": "sample", "kind": "function", "doc": "<p>Randomly selects k unique elements from a population sequence.</p>\n\n<p>This function takes a population sequence (such as a list or tuple) and a\nnumber k as input, and returns a new list containing k unique elements chosen\nrandomly from the population. The original population sequence is not modified.</p>\n\n<p>Args:\n    population: The sequence from which to select elements.\n    k: The number of elements to select. Must be less than or equal to the\n       length of the population.\n    random: Optional parameters for generating random dependency functions, default to random() functions generated using os.urandom()</p>\n\n<p>Returns:\n    list: A new list containing k unique elements randomly selected from the population.</p>\n\n<p>Raises:\n    TypeError: If population is not a Sequence\n    ValueError: If k is greater than the length of the population.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">population</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">random</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">random</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.color", "modulename": "pyhelper.color", "kind": "module", "doc": "<p>A Python module about the Color. Contains RGBColor, HEXColor and HSLColor.\nCopyright (C)\nYou can use this module as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HEXColor</span><span class=\"o\">.</span><span class=\"n\">RED</span>\n<span class=\"go\">&#39;#FF0000&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HEXColor</span><span class=\"o\">.</span><span class=\"n\">YELLOW</span>\n<span class=\"go\">&#39;#FFFF00&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HEXColor</span><span class=\"o\">.</span><span class=\"n\">to_rgb</span><span class=\"p\">(</span><span class=\"n\">HEXColor</span><span class=\"o\">.</span><span class=\"n\">RED</span><span class=\"p\">)</span>\n<span class=\"go\">(255, 0, 0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HEXColor</span><span class=\"o\">.</span><span class=\"n\">to_hsl</span><span class=\"p\">(</span><span class=\"n\">HEXColor</span><span class=\"o\">.</span><span class=\"n\">RED</span><span class=\"p\">)</span>\n<span class=\"go\">(0.0, 1.0, 0.5)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HSLColor</span><span class=\"o\">.</span><span class=\"n\">RED</span>\n<span class=\"go\">(0.0, 1.0, 0.5)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HSLColor</span><span class=\"o\">.</span><span class=\"n\">YELLOW</span>\n<span class=\"go\">(60.0, 1.0, 0.5)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HSLColor</span><span class=\"o\">.</span><span class=\"n\">to_rgb</span><span class=\"p\">(</span><span class=\"n\">HSLColor</span><span class=\"o\">.</span><span class=\"n\">RED</span><span class=\"p\">)</span>\n<span class=\"go\">(255, 0, 0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HSLColor</span><span class=\"o\">.</span><span class=\"n\">to_hex</span><span class=\"p\">(</span><span class=\"n\">HSLColor</span><span class=\"o\">.</span><span class=\"n\">RED</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;#FF0000&#39;</span>\n</code></pre>\n</div>\n"}, {"fullname": "pyhelper.color.RGBColor", "modulename": "pyhelper.color", "qualname": "RGBColor", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyhelper.color._RGBColor object&gt;"}, {"fullname": "pyhelper.color.HSLColor", "modulename": "pyhelper.color", "qualname": "HSLColor", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyhelper.color._HSLColor object&gt;"}, {"fullname": "pyhelper.color.HEXColor", "modulename": "pyhelper.color", "qualname": "HEXColor", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyhelper.color._HEXColor object&gt;"}, {"fullname": "pyhelper.namespace", "modulename": "pyhelper.namespace", "kind": "module", "doc": "<p>Module supporting namespace classes</p>\n\n<p>applied environment: Microsoft Windows 10, Python 3.8+\nCopyright (C)\nBy nanocode38 nanocode38@88.com\n2025.03.02</p>\n"}, {"fullname": "pyhelper.namespace.Namespace", "modulename": "pyhelper.namespace", "qualname": "Namespace", "kind": "class", "doc": "<p>A class inherits from NamespaceMeta, which is used to transform an ordinary class into a namespace class.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>class Spam(Namespace):\n          ...     a = 1\n          ...     b = 2\n          ...     def egg(d, e):\n          ...         return d + e\n          ...\n      Spam.a\n          1\n      Spam.b\n          2\n      Spam.egg(1, 2)\n          3</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "pyhelper.namespace.Namespace.using", "modulename": "pyhelper.namespace", "qualname": "Namespace.using", "kind": "function", "doc": "<p>Inject members of the current namespace into the target scope</p>\n\n<p>Args\uff1a\ntarget_namespace: Dictionary of the target scope (typically <code>globals()</code> or <code>locals()</code>), default globals()</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Magic methods and the <code>using</code> function itself will be skipped</li>\n<li>Use with caution inside functions (due to local scope limitations)</li>\n</ul>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>class Math(Namespace):\n          ...    PI = 3.14159\n          ...    def add(a, b):\n          ...       return a + b\n          ...    def multiply(a, b):\n          ...        return a * b\n          ...\n      Math.using(locals())\n      PI\n          3.14159\n      add(1, 2)\n          3\n      multiply(2, 3)\n          6\n      def egg():\n          ...    Math.using(locals())\n          ...    print(PI)\n          ...    print(add(1, 2))\n          ...\n      egg()\n          3.14159\n          3</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">target_namespace</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.namespace.NamespaceMeta", "modulename": "pyhelper.namespace", "qualname": "NamespaceMeta", "kind": "class", "doc": "<p>A MetaClass, inherits as MetaClass to change the class into a namespace</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>class NameSpace1(metaclass=NamespaceMeta):\n          ...     def add(a, b):\n          ...         return a + b\n          ...     var = 1\n          ...\n      NameSpace1.add(1, 2)\n          3\n      NameSpace1.var\n          1</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "bases": "builtins.type"}, {"fullname": "pyhelper.namespace.NamespaceMeta.__init__", "modulename": "pyhelper.namespace", "qualname": "NamespaceMeta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">bases</span>, </span><span class=\"param\"><span class=\"n\">attrs</span></span>)</span>"}, {"fullname": "pyhelper.tkhelper", "modulename": "pyhelper.tkhelper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pyhelper.tkhelper.RetMode", "modulename": "pyhelper.tkhelper", "qualname": "RetMode", "kind": "class", "doc": "<p>Result status flags for password window operations</p>\n", "bases": "enum.Flag"}, {"fullname": "pyhelper.tkhelper.RetMode.SUCCESS", "modulename": "pyhelper.tkhelper", "qualname": "RetMode.SUCCESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RetMode.SUCCESS: 1&gt;"}, {"fullname": "pyhelper.tkhelper.RetMode.ABORTED", "modulename": "pyhelper.tkhelper", "qualname": "RetMode.ABORTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RetMode.ABORTED: 2&gt;"}, {"fullname": "pyhelper.tkhelper.RetMode.VIA_BUTTON", "modulename": "pyhelper.tkhelper", "qualname": "RetMode.VIA_BUTTON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RetMode.VIA_BUTTON: 4&gt;"}, {"fullname": "pyhelper.tkhelper.RetMode.VIA_WINDOW_CLOSE", "modulename": "pyhelper.tkhelper", "qualname": "RetMode.VIA_WINDOW_CLOSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RetMode.VIA_WINDOW_CLOSE: 8&gt;"}, {"fullname": "pyhelper.tkhelper.RetMode.USER_CANCEL", "modulename": "pyhelper.tkhelper", "qualname": "RetMode.USER_CANCEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RetMode.USER_CANCEL: 6&gt;"}, {"fullname": "pyhelper.tkhelper.RetMode.WINDOW_CLOSE", "modulename": "pyhelper.tkhelper", "qualname": "RetMode.WINDOW_CLOSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RetMode.WINDOW_CLOSE: 10&gt;"}, {"fullname": "pyhelper.tkhelper.shake_window", "modulename": "pyhelper.tkhelper", "qualname": "shake_window", "kind": "function", "doc": "<p>Shake the Tkinter window</p>\n\n<p>Args:\n    window: , needs to have winfo_x(), winfo_y(), update() and geometr() methods\n    dire: Shaking Direction, can be 'vertical' or 'horizontal'\n    jitter_time: Total duration of the shaking effect, in Seconds, integer\n    jitter_count: Number of shakes, up and down count as two, integer\n    amplitude: Amplitude of the shake, in pixels, integer</p>\n\n<p>Raises:\n    ValueError: When dire is not 'vertical' or 'horizontal'</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">window</span>,</span><span class=\"param\">\t<span class=\"n\">dire</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vertical&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">jitter_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">jitter_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">amplitude</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.tkhelper.window_sleep", "modulename": "pyhelper.tkhelper", "qualname": "window_sleep", "kind": "function", "doc": "<p>Keep windows updated while the program sleeps</p>\n\n<p>Args:\n    windows: Windows that need to be kept updated\n    wait_time: Time to sleep(Seconds)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">windows</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Wm</span><span class=\"p\">],</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Wm</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">wait_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.tkhelper.password_window", "modulename": "pyhelper.tkhelper", "qualname": "password_window", "kind": "function", "doc": "<p>Create a password input window using Tkinter.</p>\n\n<p>This function generates a window prompting the user to input a password.\nIt validates the entered password and performs actions based on the correctness of the input.</p>\n\n<p>Args:\n    password: The correct password string that the user needs to input.\n    title: The title of the password window (default is \"Password\").\n    prompt: The prompt text displayed in the window (default is \"Please input your Password\").\n    mask: mask: Must be keyword parameters, Optional character to mask the password input [e.g., '*' or None(for\n    no masking, default)].\n    error_message: Optional custom error message when the password is incorrect.\n                      If not provided, the window will shake to indicate an error.\n    topmost: Boolean indicating whether the window should stay on top of others (default is False).\n    parent: Parent Tkinter window for modal behavior. If None, creates standalone window.</p>\n\n<p>Returns:\n    Returns RetMode.SUCCESS if the correct password is entered, RetMode.USER_CANCEL if canceled via button,\n    or RetMode.WINDOW_CLOSE if closed via window controls.</p>\n\n<p>Functionality:</p>\n\n<ul>\n<li>Displays a Tkinter window with a label, an entry field for password input, and two buttons (\"OK\" and \"Cancel\").</li>\n<li>Validates the entered password against the provided <code>password</code>.</li>\n<li>If the password is correct, the window closes and returns RetMode.SUCCESS.</li>\n<li>If the password is incorrect:\n<ul>\n<li>Shakes the window if no custom <code>error_message</code> is provided.</li>\n<li>Displays an error popup with the custom <code>error_message</code> if it is provided.</li>\n</ul></li>\n<li>Centers the window on the screen using the <code>center_window</code> function.</li>\n<li>Supports optional parameters for customizing the appearance and behavior of the password window.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Password&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Please enter your password&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">topmost</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyhelper</span><span class=\"o\">.</span><span class=\"n\">tkhelper</span><span class=\"o\">.</span><span class=\"n\">RetMode</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.tkhelper.center_window", "modulename": "pyhelper.tkhelper", "qualname": "center_window", "kind": "function", "doc": "<p>Center your Tkinter window</p>\n\n<p>Args:\n    window: The Tkinter window to be centered\n    dire: The Direction of centering, can be 'all', 'vertical' or 'horizontal'</p>\n\n<p>Raises:\n    ValueError: When dire is not any one of 'all', 'vertical' or 'horizontal'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"n\">dire</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.tkhelper.setting_password_window", "modulename": "pyhelper.tkhelper", "qualname": "setting_password_window", "kind": "function", "doc": "<p>Window to set password.\nArgs:\n    title: Main window title\n    prompt: The prompt text for entering password for the first time\n    prompt_again: The prompt text for entering password for the second time\n    mask: Must be keyword parameters, Optional character to mask the password input [e.g., '*' or None(for no masking, default)].\n    error_message: Optional custom error message when the password is incorrect.\n                   If not provided, the window will shake to indicate an error.\n    topmost: Boolean indicating whether the window should stay on top of others (default is False).\n    check_fun: Functions that check whether they comply with password specifications are the default constant true function</p>\n\n<p>Returns:\n    A string, if the user closes the window (press Cancel or close key, it will return None)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Password&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Please input your Password&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prompt_again</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Please input tour Password again&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">topmost</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_fun</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.mathhelper", "modulename": "pyhelper.mathhelper", "kind": "module", "doc": "<p>A Python module that provides mathematical-related tools, belonging to Pyhelper\nCopyright (C)</p>\n"}, {"fullname": "pyhelper.mathhelper.calculate_pi", "modulename": "pyhelper.mathhelper", "qualname": "calculate_pi", "kind": "function", "doc": "<p>A function that calculates PI according to a formula</p>\n\n<p>Args:\n    count: Calculate the precision of PI, the higher the value, the slower the calculation speed, the higher the precision</p>\n\n<p>Returns:\n    The result of the calculation</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>calculate_pi(100_000)  # doctest: +ELLIPSIS\n          3.141...</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.mathhelper.fibonacci", "modulename": "pyhelper.mathhelper", "qualname": "fibonacci", "kind": "function", "doc": "<p>Calculate the Fibonacci sequence for the given number.</p>\n\n<p>Args:\n    number: The number in the Fibonacci sequence to be calculated.</p>\n\n<p>Returns:\n    The Fibonacci sequence for the given number.</p>\n\n<p>Raises:\n    TypeError: If the input is not an int.\n    ValueError: If the input is a negative int.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>fibonacci(1)\n          1\n      fibonacci(10)\n          55\n      fibonacci(1.5)  # doctest: +IGNORE_EXCEPTION_DETAIL\n          Traceback (most recent call last):\n              ...\n          TypeError: Please pass an int argument, not a float!\n      fibonacci(-1)  # doctest: +IGNORE_EXCEPTION_DETAIL\n          Traceback (most recent call last):\n              ...\n          ValueError: Please pass a positive int argument!</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.mathhelper.is_prime", "modulename": "pyhelper.mathhelper", "qualname": "is_prime", "kind": "function", "doc": "<p>Check if the given number is a prime number.</p>\n\n<p>Args:\n    number: The number to be checked for primality.</p>\n\n<p>Returns:\n    True if the number is prime, False otherwise.</p>\n\n<p>Raises:\n    TypeError: If the input is not an int.\n    ValueError: If the input is a negative int.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>is_prime(2)\n          True\n      is_prime(3)\n          True\n      is_prime(5)\n          True\n      is_prime(7)\n          True\n      is_prime(11)\n          True\n      is_prime(13)\n          True\n      is_prime(17)\n          True\n      is_prime(19)\n          True\n      is_prime(23)\n          True\n      is_prime(29)\n          True\n      is_prime(31)\n          True\n      is_prime(37)\n          True\n      is_prime(41)\n          True\n      is_prime(43)\n          True\n      is_prime(47)\n          True\n      is_prime(53)\n          True\n      is_prime(1)\n          False\n      is_prime(-1)\n          False\n      is_prime(105)\n          False\n      is_prime(292)\n          False\n      is_prime(63)\n          False\n      is_prime(39)\n          False</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.mathhelper.PI", "modulename": "pyhelper.mathhelper", "qualname": "PI", "kind": "variable", "doc": "<p></p>\n", "default_value": "3.141592653589793"}, {"fullname": "pyhelper.mathhelper.E", "modulename": "pyhelper.mathhelper", "qualname": "E", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.718281828459045"}, {"fullname": "pyhelper.mathhelper.FAI", "modulename": "pyhelper.mathhelper", "qualname": "FAI", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.5772156649015329"}, {"fullname": "pyhelper.mathhelper.TAU", "modulename": "pyhelper.mathhelper", "qualname": "TAU", "kind": "variable", "doc": "<p></p>\n", "default_value": "6.283185307179586"}, {"fullname": "pyhelper", "modulename": "pyhelper", "kind": "module", "doc": "<p><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s>~~~\nPYHELPER--PyHelper--pyhelper</p>\n\n<h1 id=\"pyhelper-packages-that-provide-more-helper-tools-for-python\">Pyhelper - Packages that provide more helper tools for Python</h1>\n\n<p><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s><s>~</s>~~~</p>\n\n<h2 id=\"-1\">.</h2>\n\n<p>Pyhelper is a set of packages designed to make writing Python programs better.\nIt is built on Python 3.13 and contains a rich set of classes and functions.\nThe package is highly portable and works perfectly on Windows\nPython packages containing all sorts of useful data structures, functions,\nclasses, etc. that Python doesn't have</p>\n\n<p>Because pypi is duplicated, this library on pypi is called nanocode38-pyhelper, but please still use pyhelper\nafter downloading and importing.</p>\n\n<p>applied environment: Microsoft Windows 11, Python 3.8+\nCopyright (C)\nBy nanocode38 nanocode38@88.com\n2025.03.02</p>\n"}, {"fullname": "pyhelper.get_version", "modulename": "pyhelper", "qualname": "get_version", "kind": "function", "doc": "<p>Returns the current version number of the pygwidgets package</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.file_reopen", "modulename": "pyhelper", "qualname": "file_reopen", "kind": "function", "doc": "<p>Context Manager: Temporarily change the standard output stream to the specified file.</p>\n\n<p>Args:\n    file_obj: The Object of the file to redirect the standard output stream to.\n    stream: The stream to redirect.</p>\n\n<p>Returns:\n    The original standard output stream.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>original_stdin = sys.stdin\n      original_stdout = sys.stdout\n      if not os.path.isfile(\"test.in\"):\n          ...     os.chdir(\"../tests\")\n      with open(\"test.in\", \"r\", encoding=\"utf-8\") as fb:\n          ...     with file_reopen(fb, \"stdin\"):\n          ...         print(sys.stdin == fb)\n          ...         file_input = input()\n          True\n      sys.stdin == original_stdin\n          True\n      file_input == \"Hello, World!\"\n          True\n      with open(\"test.out\", \"w\", encoding=\"utf-8\") as fb:\n          ...     with file_reopen(fb, \"stdout\"):\n          ...         print(\"Hello, World!\")\n          ...         spam = (sys.stdout == fb)\n      sys.stdout == original_stdout\n          True\n      spam\n          True\n      with open(\"test.out\", \"r\", encoding=\"utf-8\") as fb:\n          ...     fb.read() == \"Hello, World!\\n\"\n          True\n      with open(\"test.out\", \"w\", encoding=\"utf-8\"):\n          ...     pass</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_obj</span>,</span><span class=\"param\">\t<span class=\"n\">stream</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">TextIOWrapper</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;cp936&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.chdir", "modulename": "pyhelper", "qualname": "chdir", "kind": "function", "doc": "<p>Context Manager: Temporarily change the current working directory to the specified path.</p>\n\n<p>Args:\n    path: The path to change the current working directory to.</p>\n\n<p>Returns:\n    The original working directory.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>import os\n      this_path = os.path.abspath('.')\n      father_path = os.path.abspath('..')\n      with chdir(father_path):\n          ...     os.getcwd() == father_path\n          ...\n          True\n      os.getcwd() == this_path\n          True</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.create_shortcut", "modulename": "pyhelper", "qualname": "create_shortcut", "kind": "function", "doc": "<p>This function is outdated, please do not use new projects\nCreates a shortcut to the specified target file.</p>\n\n<p>Args:\n    target: Full path to the target file.\n    shortcut_name: Name for the shortcut.\n    shortcut_location: Location for the shortcut.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">shortcut_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">shortcut_location</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.join_startup", "modulename": "pyhelper", "qualname": "join_startup", "kind": "function", "doc": "<p>Add a file to startup on Windows, macOS, or Linux.</p>\n\n<p>Args:\n    target: Absolute path to the file/script to run at startup.\n    args and kwargs: Used to be compatible with old versions of name parameters</p>\n\n<p>Returns:\n    True if successful, False otherwise.</p>\n\n<p>Raises:\n    OSError: If the platform is not supported.</p>\n\n<p>Notes:\n    - Windows: Uses registry (HKCU) for user-level startup\n    - macOS: Creates Launch Agent plist in ~/Library/LaunchAgents\n    - Linux: Creates systemd user service or .desktop file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.get_startup_dir", "modulename": "pyhelper", "qualname": "get_startup_dir", "kind": "function", "doc": "<p>A function for obtaining the start-up directory</p>\n\n<p>Returns:\n    A string for the start-up directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.system", "modulename": "pyhelper", "qualname": "system", "kind": "function", "doc": "<p>A function is used to replace the os.system()</p>\n\n<p>Args:\n    command: Same as os.system(), the instruction that needs to be run\n    nonblocking: Whether to run in a different process (whether not to block the current process), default False</p>\n\n<p>Returns:\n    exit code</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">nonblocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pyhelper.Singleton", "modulename": "pyhelper", "qualname": "Singleton", "kind": "class", "doc": "<p>An abstract base class to allow its subclass to be instantiated only once.</p>\n\n<p>Warning:\n    If the subclass overloads the __new__() method, the parent class's __new__()\n    method must be called in the __new__() method of the subclass, otherwise this abstract base class is invalid</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>class FooSingleton(Singleton):\n          ...     def __init__(self):\n          ...         self.foo = 1\n          ...\n      spam = FooSingleton()\n      egg = FooSingleton()\n          Traceback (most recent call last):\n          ...\n          RuntimeError: The Singleton Class can only be instantiated once</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "bases": "abc.ABC"}, {"fullname": "pyhelper.timer", "modulename": "pyhelper", "qualname": "timer", "kind": "function", "doc": "<p>Context Manager for Calculating Program Running Time</p>\n\n<p>Args:\n    callback: Callback function, called at the end of the manager, contains at least the first parameter and the parameter type is float to accept time, Default: Do Nothing\n    args: Positional parameters will be passed to the callback function\n    kwargs: keyword parameters will be passed to the callback function</p>\n\n<p>Returns:\n    Generator[float, Any, None]: The starting execution time (UTC time)</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>import time\n      import math\n      t0 = time.time()\n      time.sleep(2)\n      t1 = time.time() - t0\n      t2: int\n      def spam(t1: float, bar, egg):\n          ...     global t2\n          ...     print(egg)\n          ...     print(bar)\n          ...     t2 = t1\n          ...\n      with timer(spam, 1, egg=\"Hello\"):\n          ...     time.sleep(2)\n          ...\n          Hello\n          1\n      math.isclose(t1, t2, rel_tol=.1)\n          True\n      math.isclose(t2, 2., rel_tol=.1)\n          True</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();